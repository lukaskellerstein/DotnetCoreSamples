// <auto-generated />
using System;
using App;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using App.Model;

namespace App.Migrations
{
    [DbContext(typeof(BloggingContext))]
    [Migration("20200817134208_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.LatencyMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Percentile")
                        .HasColumnType("float");

                    b.Property<long>("TestRunId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TestRunId");

                    b.ToTable("LatencyMetrics");
                });

            modelBuilder.Entity("App.PullRequest", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PullRequests");
                });

            modelBuilder.Entity("App.PullRequestBuildInfo", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ContainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PullRequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PullRequestId");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("App.TestRun", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PullRequestBuildInfoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PullRequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PullRequestBuildInfoId");

                    b.HasIndex("PullRequestId");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("App.LatencyMetric", b =>
                {
                    b.HasOne("App.TestRun", null)
                        .WithMany("LatencyMetrics")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("App.PullRequestBuildInfo", b =>
                {
                    b.HasOne("App.PullRequest", "PullRequest")
                        .WithMany("Builds")
                        .HasForeignKey("PullRequestId");
                });

            modelBuilder.Entity("App.TestRun", b =>
                {
                    b.HasOne("App.PullRequestBuildInfo", null)
                        .WithMany("TestRuns")
                        .HasForeignKey("PullRequestBuildInfoId");

                    b.HasOne("App.PullRequest", "PullRequest")
                        .WithMany()
                        .HasForeignKey("PullRequestId");
                });
#pragma warning restore 612, 618
        }
    }
}
